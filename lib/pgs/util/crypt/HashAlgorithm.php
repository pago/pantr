<?php
namespace pgs\util\crypt;

class HashAlgorithm {
	private $algorithm;
	public function __construct($algorithm) {
		$this->algorithm = $algorithm;
	}

	/**
	 * Hashes a given string.
	 * 
	 * There are two alternative return types: hash-only and salt-hash.
	 * hash-only means that the return value will be the hash while salt-hash means
	 * the salt is prefixed to the hash.
	 *
	 * This makes sense when you have not specified a salt, because otherwise you'd not
	 * be able to verify the identity of a salt.
	 *
	 * Example:
	 * $hashAlgorithm->hash('password') will return $uniqueSalt . hash(salt('password', $uniqueSalt))
	 */
	public function hash($str, $uniqueSalt=null) {
		if($uniqueSalt == null) {
			$uniqueSalt = $this->generateUniqueSalt();
			return $uniqueSalt . hash($this->algorithm, $this->salt($str, $uniqueSalt));
		} else {
			return hash($this->algorithm, $this->salt($str, $uniqueSalt));
		}
	}

	/**
	 * Salts a given string with the given salt, injects an additional site-specific
	 * salt for maximum security.
	 */
	private function salt($str, $uniqueSalt) {
		return $uniqueSalt . $str . MessageDigest::siteSalt();
	}

	private function generateUniqueSalt() {
		return substr(uniqid(rand(), true), 0, MessageDigest::SALT_LENGTH);
	}

	/**
	 * Checks if a plain text is equal to a hash generated by
	 * Pgs_HashAlgorithm::hash method.
	 * Example:
	 * $hashAlgorithm->compare('password', $hashAlgorithm->hash('password'));
	 * will return true, even though 'password' has been salted
	 */
	public function compare($plain, $hash, $salt=null) {
		if($salt == null) {
			$salt = substr($hash, 0, MessageDigest::SALT_LENGTH);
			$hash = substr($hash, MessageDigest::SALT_LENGTH);
		}
		return $hash == $this->hash($plain, $salt);
	}

	/**
	 * Returns the length of the hash of some input using the standard hashing method.
	 * If no parameter is passed, or the parameter is true, this will prepend a unique salt in front of
	 * the hash before counting its length.
	 */
	public function length($useAutoSalt = true) {
		return strlen($this->hash('foo', $useAutoSalt ? null : 'bar'));
	}
}
